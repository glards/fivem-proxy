using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Protocol;
using Protocol.FiveM;
using Sewer56.BitStream;
using Sewer56.BitStream.ByteStreams;
using Xunit;
using Xunit.Abstractions;

namespace FPUnitTests.FiveM
{
    public class ClonePacketTest
    {
        private readonly ITestOutputHelper _output;
        public ClonePacketTest(ITestOutputHelper output)
        {
            _output = output;
        }

        [Fact]
        public void PlayerSpwanTest()
        {
            string packetStr = "A000118CF800000004B8CB0000800000005864801486B88A64803800683FE0008D0005840134001A27192631400010100040C0314A1FF00600000000000000FFFF801B000050FE7E000000C841002AB000000000200431BB82E4F810606B88A6480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005C602B39800000000400400002000A4C007C02136004014C4914B4D96F808000000240028008005001000A00200140040028008005001000A002003500400C4009C0000014DC070";

            var packet = Convert.FromHexString(packetStr);

            CloneParser parser = new CloneParser(packet);
            foreach (var act in parser.Parse())
            {
                _output.WriteLine(act.ToString());

                if (act is ClonePacket { ObjectType: var objectType } clonePacket && objectType != 0xFF)
                {
                    var objectTypeEnum = (CloneParser.ObjectType) objectType;

                    _output.WriteLine($">> ObjectType:{objectTypeEnum}");

                    var abs = new ArrayByteStream(clonePacket.SyncData);
                    var bs = new BitStream<ArrayByteStream>(abs);

                    _output.WriteLine($">> SyncTree:{bs.GetBitString()}");
                }
            }
        }

        [Fact]
        public void FuzzyCloneTest()
        {
            string packetLog

            var packet = Convert.FromHexString(packetLog);

            CloneParser parser = new CloneParser(packet);
            foreach (var act in parser.Parse())
            {
                _output.WriteLine(act.ToString());
            }
        }

        [Fact]
        public void CloneSyncFailureTest()
        {
            string packetStr = "A0188FE29800095CAD3351800D812540091216E97CBA00473DF7E976E00490DD0E700CC002A38801E097007F02130400000003002F73C4E0";

            var packet = Convert.FromHexString(packetStr);

            CloneParser parser = new CloneParser(packet);
            foreach (var act in parser.Parse())
            {
                _output.WriteLine(act.ToString());
            }
        }
    }
}
